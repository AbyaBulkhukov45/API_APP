{
	"info": {
		"_postman_id": "4eecdba8-a08e-49cb-8afa-c995acc450eb",
		"name": "API_for_yatube",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16131548"
	},
	"item": [
		{
			"name": "auth_tests",
			"item": [
				{
					"name": "get_token_for_regular_user // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"        \"refresh\": {\"type\": \"string\"},",
									"        \"access\": {\"type\": \"string\"},",
									"    },",
									"    \"required\": [\"refresh\", \"access\"],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На POST-запрос с корректными данными должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"    pm.collectionVariables.set(\"userAccessToken\", responseData.access);",
									"    pm.collectionVariables.set(\"userRefreshToken\", responseData.refresh);",
									"    pm.collectionVariables.set(\"userUsername\", JSON.parse(request.data).username);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"regular_user\",\n    \"password\": \"iWannaBeAdmin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/jwt/create/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_token_for_admin // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"        \"refresh\": {\"type\": \"string\"},",
									"        \"access\": {\"type\": \"string\"},",
									"    },",
									"    \"required\": [\"refresh\", \"access\"],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На POST-запрос с корректными данными должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"    pm.collectionVariables.set(\"adminAccessToken\", responseData.access);",
									"    pm.collectionVariables.set(\"adminRefreshToken\", responseData.refresh);",
									"    pm.collectionVariables.set(\"adminUsername\", JSON.parse(request.data).username);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"root\",\n    \"password\": \"5eCretPaSsw0rD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/jwt/create/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh_token // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"        \"access\": {\"type\": \"string\"},",
									"    },",
									"    \"required\": [\"access\"],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На POST-запрос с корректными данными должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"    pm.collectionVariables.set(\"adminAccessToken\", responseData.access);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{adminRefreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/jwt/refresh/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"jwt",
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh_with_invalid_token // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"        \"detail\": {\"type\": \"string\"},",
									"        \"code\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"detail\", \"code\"],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 401\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"Запрос с невалидным refresh-токеном должен возвращаться ответ со статусом 401\"",
									"    ).to.be.eql(\"Unauthorized\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test('Значения полей в ответе должны соответствовать спецификации', function () {",
									"    pm.expect(",
									"        responseData.code,",
									"        \"Убедитесь, что значение поля `code` в ответе соответствует спецификации API\"",
									"    ).to.be.eql(\"token_not_valid\");",
									"    pm.expect(",
									"        responseData.detail,",
									"        \"Убедитесь, что значение поля `detail` в ответе соответствует спецификации API\"",
									"    ).to.be.eql(\"Token is invalid or expired\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"invalid_token\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/jwt/refresh/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"jwt",
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "verify_valid_token // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На POST-запрос с валидным токеном должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{adminAccessToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/jwt/verify/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"jwt",
								"verify",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "verify_invalid_token // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"        \"detail\": {\"type\": \"string\"},",
									"        \"code\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"detail\", \"code\"],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 401\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На POST-запрос с невалидным токеном должен возвращаться ответ со статусом 401\"",
									"    ).to.be.eql(\"Unauthorized\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test('Значения полей в ответе должны соответствовать спецификации', function () {",
									"    pm.expect(",
									"        responseData.code,",
									"        \"Убедитесь, что значение поля `code` в ответе соответствует спецификации API\"",
									"    ).to.be.eql(\"token_not_valid\");",
									"    pm.expect(",
									"        responseData.detail,",
									"        \"Убедитесь, что значение поля `detail` в ответе соответствует спецификации API\"",
									"    ).to.be.eql(\"Token is invalid or expired\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"invalid_token\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/jwt/verify/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"jwt",
								"verify",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "group_tests",
			"item": [
				{
					"name": "get_group_list // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\":{",
									"            \"id\": {\"type\": \"number\"},",
									"            \"title\": {\"type\": \"string\"},",
									"            \"slug\": {\"type\": \"string\"},",
									"            \"description\": {\"type\": \"string\"}",
									"        },",
									"        \"required\": [\"id\", \"title\", \"slug\", \"description\"],",
									"        \"additionalProperties\": false",
									"    }",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос незарегистрированного пользователя должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"    pm.collectionVariables.set(\"group_id\", responseData[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/groups/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"groups",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_group_details // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"        \"id\": {\"type\": \"number\"},",
									"        \"title\": {\"type\": \"string\"},",
									"        \"slug\": {\"type\": \"string\"},",
									"        \"description\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"id\", \"title\", \"slug\", \"description\"],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос незарегистрированного пользователя должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{Token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/groups/{{group_id}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"groups",
								"{{group_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "post_tests",
			"item": [
				{
					"name": "create_post_without_group // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"id\", \"author\", \"text\", \"pub_date\", \"image\", \"group\"],",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"author\": {\"type\": \"string\"},",
									"        \"text\": {\"type\": \"string\"},",
									"        \"pub_date\": {\"type\": \"string\"},",
									"        \"image\": {\"type\": [\"string\", \"null\"]},",
									"        \"group\": {\"type\": [\"number\", \"null\"]}",
									"    },",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 201\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"Зарегистрированный пользователь должен иметь возможность создать пост без указания группы\"",
									"    ).to.be.eql(\"Created\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test(\"Ответ должен содержать ожидаемые данные\", function () {",
									"    pm.expect(responseData.author).to.eql(",
									"        pm.collectionVariables.get(\"userUsername\"),",
									"        \"Убедитесь, что поле `author` содержит `username` пользователя, отправившего запрос\"",
									"    );",
									"    const requestData = JSON.parse(request.data);",
									"    pm.expect(responseData.text).to.eql(",
									"        requestData.text,",
									"        \"Убедитесь, что поле `text` содержит текст, отправленный в запросе\"",
									"    );",
									"    pm.expect(",
									"        responseData.group,",
									"        \"Убедитесь, что поле `group` содержит `null`, если в запросе не передан id группы\"",
									"    ).to.be.null;",
									"    pm.collectionVariables.set(\"post_without_group\", responseData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Пост зарегистрированного пользователя.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create_post_with_group // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"id\", \"author\", \"text\", \"pub_date\", \"image\", \"group\"],",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"author\": {\"type\": \"string\"},",
									"        \"text\": {\"type\": \"string\"},",
									"        \"pub_date\": {\"type\": \"string\"},",
									"        \"image\": {\"type\": [\"string\", \"null\"]},",
									"        \"group\": {\"type\": [\"number\", \"null\"]}",
									"    },",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 201\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"Зарегистрированный пользователь должен иметь возможность создать пост с указанием группы для этого поста\"",
									"    ).to.be.eql(\"Created\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test(\"Ответ должен содержать ожидаемые данные\", function () {",
									"    pm.expect(responseData.author).to.eql(",
									"        pm.collectionVariables.get(\"userUsername\"),",
									"        \"Убедитесь, что поле `author` содержит `username` пользователя, отправившего запрос\"",
									"    );",
									"    const requestData = JSON.parse(request.data);",
									"    pm.expect(responseData.text).to.eql(",
									"        requestData.text,",
									"        \"Убедитесь, что поле `text` содержит текст, отправленный в запросе\"",
									"    );",
									"    pm.expect(responseData.group).to.eql(",
									"        requestData.group,",
									"        \"Убедитесь, что поле `group` содержит id группы, отправленный в запросе\"",
									"    );",
									"    pm.collectionVariables.set(\"post_with_group\", responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Пост с группой\",\n    \"group\": {{group_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_post_list // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\":{",
									"            \"id\": {\"type\": \"number\"},",
									"            \"author\": {\"type\": \"string\"},",
									"            \"text\": {\"type\": \"string\"},",
									"            \"pub_date\": {\"type\": \"string\"},",
									"            \"image\": {\"type\": [\"string\", \"null\"]},",
									"            \"group\": {\"type\": [\"number\", \"null\"]}",
									"        },",
									"        \"required\": [\"id\", \"author\", \"text\", \"pub_date\", \"image\", \"group\"],",
									"        \"additionalProperties\": false",
									"    }",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос зарегистрированного пользователя должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_post_list_with_pagination // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"count\": {\"type\": \"number\"},",
									"    \"next\": {\"type\": [\"string\", \"null\"]},",
									"    \"previous\": {\"type\": [\"string\", \"null\"]},",
									"    \"results\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"            \"type\": \"object\",",
									"            \"properties\":{",
									"                \"id\": {\"type\": \"number\"},",
									"                \"author\": {\"type\": \"string\"},",
									"                \"text\": {\"type\": \"string\"},",
									"                \"pub_date\": {\"type\": \"string\"},",
									"                \"image\": {\"type\": [\"string\", \"null\"]},",
									"                \"group\": {\"type\": [\"number\", \"null\"]}",
									"            },",
									"            \"required\": [\"id\", \"author\", \"text\", \"pub_date\", \"image\", \"group\"],",
									"            \"additionalProperties\": false",
									"        }",
									"    }",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос зарегистрированного пользователя должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.expect(",
									"        pm.response,",
									"        \"Убедитесь, что к эндпоинту `/api/v1/posts/` подключен пагинатор, использующий query-параметры `limit` и `offset`\"",
									"    ).to.have.jsonSchema(responseSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/?limit=1&offset=1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_post_details // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"id\", \"author\", \"text\", \"pub_date\", \"image\", \"group\"],",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"author\": {\"type\": \"string\"},",
									"        \"text\": {\"type\": \"string\"},",
									"        \"pub_date\": {\"type\": \"string\"},",
									"        \"image\": {\"type\": [\"string\", \"null\"]},",
									"        \"group\": {\"type\": [\"number\", \"null\"]}",
									"    },",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос зарегистрированного пользователя должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответстовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_without_group}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_without_group}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update_post_with_patch_request // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"id\", \"author\", \"text\", \"pub_date\", \"image\", \"group\"],",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"author\": {\"type\": \"string\"},",
									"        \"text\": {\"type\": \"string\"},",
									"        \"pub_date\": {\"type\": \"string\"},",
									"        \"image\": {\"type\": [\"string\", \"null\"]},",
									"        \"group\": {\"type\": [\"number\", \"null\"]}",
									"    },",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На корректный запрос автора поста должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test(\"Ответ должен содержать ожидаемые данные\", function () {",
									"    pm.expect(responseData.author).to.eql(",
									"        pm.collectionVariables.get(\"userUsername\"),",
									"        \"Убедитесь, что поле `author` содержит `username` пользователя, отправившего запрос\"",
									"    );",
									"    const requestData = JSON.parse(request.data);",
									"    pm.expect(responseData.text).to.eql(",
									"        requestData.text,",
									"        \"Убедитесь, что поле `text` содержит текст, отправленный в запросе\"",
									"    );",
									"    pm.expect(responseData.group).to.eql(",
									"        requestData.group,",
									"        \"Убедитесь, что поле `group` содержит id группы, отправленный в запросе\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Добавляем пост в группу\",\n    \"group\": {{group_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_without_group}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_without_group}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update_post_with_put_request // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"id\", \"author\", \"text\", \"pub_date\", \"image\", \"group\"],",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"author\": {\"type\": \"string\"},",
									"        \"text\": {\"type\": \"string\"},",
									"        \"pub_date\": {\"type\": \"string\"},",
									"        \"image\": {\"type\": [\"string\", \"null\"]},",
									"        \"group\": {\"type\": [\"number\", \"null\"]}",
									"    },",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На корректный запрос автора поста должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test(\"Ответ должен содержать ожидаемые данные\", function () {",
									"    pm.expect(responseData.author).to.eql(",
									"        pm.collectionVariables.get(\"userUsername\"),",
									"        \"Убедитесь, что поле `author` содержит `username` пользователя, отправившего запрос\"",
									"    );",
									"    const requestData = JSON.parse(request.data);",
									"    pm.expect(responseData.text).to.eql(",
									"        requestData.text,",
									"        \"Убедитесь, что поле `text` содержит текст, отправленный в запросе\"",
									"    );",
									"    pm.expect(",
									"        responseData.group,",
									"        \"Убедитесь, что поле `group` содержит `null`, если в запросе в качестве значения данного поля передан `null`\"",
									"    ).to.be.null;",
									"    pm.collectionVariables.set(\"post_without_group\", responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Обновленный текст через PUT-запрос\",\n    \"group\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_without_group}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_without_group}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_post // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус-код ответа должен быть 204\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос автора поста должен возвращаться ответ со статусом 204\"",
									"    ).to.be.eql(\"No Content\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_without_group}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_without_group}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{userAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "comment_tests",
			"item": [
				{
					"name": "create_comment // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"id\", \"author\", \"text\", \"created\", \"post\"],",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"author\": {\"type\": \"string\"},",
									"        \"text\": {\"type\": \"string\"},",
									"        \"created\": {\"type\": \"string\"},",
									"        \"post\": {\"type\": \"number\"}",
									"    },",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 201\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"Корректный запрос зарегистрированного пользователя должен возвращать ответ со статусом 201\"",
									"    ).to.be.eql(\"Created\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test(\"Ответ должен содержать ожидаемые данные\", function () {",
									"    pm.expect(responseData.author).to.eql(",
									"        pm.collectionVariables.get(\"userUsername\"),",
									"        \"Убедитесь, что поле `author` содержит `username` пользователя, отправившего запрос\"",
									"    );",
									"    const requestData = JSON.parse(request.data);",
									"    pm.expect(responseData.text).to.eql(",
									"        requestData.text,",
									"        \"Убедитесь, что поле `text` содержит текст, отправленный в запросе\"",
									"    );",
									"    pm.expect(responseData.post).to.eql(",
									"        pm.collectionVariables.get(\"post_with_group\"),",
									"        \"Убедитесь, что поле `post` содержит id поста, указанный в url при запросе\"",
									"    );",
									"    pm.collectionVariables.set(\"comment_id\", responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Тестовый комментарий\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_with_group}}",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_comments // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\":{",
									"            \"id\": {\"type\": \"number\"},",
									"            \"author\": {\"type\": \"string\"},",
									"            \"text\": {\"type\": \"string\"},",
									"            \"created\": {\"type\": \"string\"},",
									"            \"post\": {\"type\": [\"number\", \"null\"]}",
									"        },",
									"        \"required\": [\"id\", \"author\", \"text\", \"created\", \"post\"],",
									"        \"additionalProperties\": false",
									"    }",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос незарегистрированного пользователя должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_with_group}}",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_comment_details // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"id\", \"author\", \"text\", \"created\", \"post\"],",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"author\": {\"type\": \"string\"},",
									"        \"text\": {\"type\": \"string\"},",
									"        \"created\": {\"type\": \"string\"},",
									"        \"post\": {\"type\": \"number\"}",
									"    },",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос незарегистрированного пользователя должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test(\"Ответ должен содердать ожидаемые данные\", function () {",
									"    pm.expect(responseData.id).to.eql(",
									"        pm.collectionVariables.get(\"comment_id\"),",
									"        \"Убедитесь, что поле `post` содержит id поста, указанный в url при запросе\"",
									"    );",
									"    pm.expect(responseData.post).to.eql(",
									"        pm.collectionVariables.get(\"post_with_group\"),",
									"        \"Убедитесь, что поле `post` содержит id поста, указанный в url при запросе\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_with_group}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update_comment_with_patch_request // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"id\", \"author\", \"text\", \"created\", \"post\"],",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"author\": {\"type\": \"string\"},",
									"        \"text\": {\"type\": \"string\"},",
									"        \"created\": {\"type\": \"string\"},",
									"        \"post\": {\"type\": \"number\"}",
									"    },",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На корректный запрос автора комментария должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test(\"Ответ должен содержать ожидаемые данные\", function () {",
									"    pm.expect(responseData.author).to.eql(",
									"        pm.collectionVariables.get(\"userUsername\"),",
									"        \"Убедитесь, что поле `author` содержит `username` пользователя, отправившего запрос\"",
									"    );",
									"    const requestData = JSON.parse(request.data);",
									"    pm.expect(responseData.text).to.eql(",
									"        requestData.text,",
									"        \"Убедитесь, что поле `text` содержит текст, отправленный в запросе\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Новый текст для комментария\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_with_group}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update_commetn_with_put_request // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"id\", \"author\", \"text\", \"created\", \"post\"],",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"author\": {\"type\": \"string\"},",
									"        \"text\": {\"type\": \"string\"},",
									"        \"created\": {\"type\": \"string\"},",
									"        \"post\": {\"type\": \"number\"}",
									"    },",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На корректный запрос автора комментария должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test(\"Ответ должен содержать ожидаемые данные\", function () {",
									"    pm.expect(responseData.author).to.eql(",
									"        pm.collectionVariables.get(\"userUsername\"),",
									"        \"Убедитесь, что поле `author` содержит `username` пользователя, отправившего запрос\"",
									"    );",
									"    const requestData = JSON.parse(request.data);",
									"    pm.expect(responseData.text).to.eql(",
									"        requestData.text,",
									"        \"Убедитесь, что поле `text` содержит текст, отправленный в запросе\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Текст изменен через PUT-запрос\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_with_group}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_comment // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус-код ответа должен быть 204\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос автора комментария должен возвращаться ответ со статусом 204\"",
									"    ).to.be.eql(\"No Content\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_with_group}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create_comment_for_permission_tests // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"id\", \"author\", \"text\", \"created\", \"post\"],",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"author\": {\"type\": \"string\"},",
									"        \"text\": {\"type\": \"string\"},",
									"        \"created\": {\"type\": \"string\"},",
									"        \"post\": {\"type\": \"number\"}",
									"    },",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 201\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"Корректный запрос зарегистрированного пользователя должен возвращать ответ со статусом 201\"",
									"    ).to.be.eql(\"Created\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"    pm.collectionVariables.set(\"comment_id_for_permission_tests\", responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Комментарий для проверки ограничения прав на редактирование / удаление\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_with_group}}",
								"comments",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{userAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "follow_tests",
			"item": [
				{
					"name": "create_subscription // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"        \"user\": {\"type\": \"string\"},",
									"        \"following\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"user\", \"following\"],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 201\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос зарегистрированного пользователя с корректными данными должен возвращаться ответ со статусом 201\"",
									"    ).to.be.eql(\"Created\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test('Значения полей в ответе должны соответствовать спецификации', function () {",
									"    pm.expect(",
									"        responseData.user,",
									"        \"Убедитесь, что в ответе на запрос значением поля `user` является `username` пользователя, отправившего запрос\"",
									"    ).to.be.eql(pm.collectionVariables.get(\"userUsername\"));",
									"    pm.expect(",
									"        responseData.following,",
									"        \"Убедитесь, что в ответе на запрос значением поля `following` является `username` автора, на которого оформлена подписка\"",
									"    ).to.be.eql(pm.collectionVariables.get(\"adminUsername\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"following\": \"{{adminUsername}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/follow/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"follow",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_follows // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseSchema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\":{",
									"            \"user\": {\"type\": \"string\"},",
									"            \"following\": {\"type\": \"string\"}",
									"        },",
									"        \"required\": [\"user\", \"following\"],",
									"        \"additionalProperties\": false",
									"    }",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос зарегистрированного пользователя должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/follow/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"follow",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "search_follow // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\":{",
									"            \"user\": {\"type\": \"string\"},",
									"            \"following\": {\"type\": \"string\"}",
									"        },",
									"        \"required\": [\"user\", \"following\"],",
									"        \"additionalProperties\": false",
									"    }",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос зарегистрированного пользователя должен возвращаться ответ со статусом 200\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test(",
									"    \"Перечень подписок должен содержать только элементы, удовлетворяющие условиям поиска\",",
									"    function () {",
									"        const assert_msg = \"Убедитесь, что в ответ на запрос содержит только данные подписок, удовлетворяющих условию поиска\"",
									"        pm.expect(responseData.length > 0, assert_msg);",
									"",
									"        const expected_username = pm.request.url.query.get(\"search\");",
									"        for (elem of responseData) {",
									"            pm.expect(elem.following, assert_msg).to.be.eql(expected_username);",
									"        };",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/follow/?search={{adminUsername}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"follow",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "{{adminUsername}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "negative_tests",
			"item": [
				{
					"name": "create_update_delete_group",
					"item": [
						{
							"name": "create_group // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"API не должен предоставлять возможность создания группы\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Тестовая группа\",\n    \"slug\": \"test-group\",\n    \"description\": \"Проверка возможности создания группы\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/groups/{{group_id}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"groups",
										"{{group_id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_group_with_patch_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"API не должен предоставлять возможность редактирования группы\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Тестовая группа\",\n    \"slug\": \"test-group\",\n    \"description\": \"Проверка возможности создания группы\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/groups/{{group_id}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"groups",
										"{{group_id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_group_with_put_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"API не должен предоставлять возможность редактирования группы\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Тестовая группа\",\n    \"slug\": \"test-group\",\n    \"description\": \"Проверка возможности создания группы\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/groups/{{group_id}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"groups",
										"{{group_id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_group // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"API не должен предоставлять возможность удаления группы\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/groups/{{group_id}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"groups",
										"{{group_id}}",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "update_delete_post_not_author_user",
					"item": [
						{
							"name": "update_post_not_author_with_patch_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 403\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"У пользователя не должно быть возможности изменять чужие посты\"",
											"    ).to.be.eql(\"Forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Убираем пост из группы\",\n    \"group\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{post_with_group}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_post_not_author_with_put_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 403\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"У пользователя не должно быть возможности изменять чужие посты\"",
											"    ).to.be.eql(\"Forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Убираем пост из группы\",\n    \"group\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{post_with_group}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_post_not_author // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 403\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"У пользователя не должно быть возможности удалять чужие посты\"",
											"    ).to.be.eql(\"Forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{post_with_group}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create_update_with_corrupted_data",
					"item": [
						{
							"name": "create_post_with_empty_text // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе пользователя на создание поста в поле `text` содержится пустая строка - должен вернуться ответ со статусом 400\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_post_with_invalid_group // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе пользователя на создание поста в поле `group` содержится идентификатор несуществующей группы - должен вернуться ответ со статусом 400\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Пост с несуществующей группой\",\n    \"group\": -1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_post_with_empty_text // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе автора на редактирование поста поле `text` содержит пустую строку - должен вернуться ответ со статусом 400\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{post_with_group}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "put_for_post_with_non_existing_group // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если запрос автора на редактирование поста содержит в поле `group` данные несуществующей группы - должен вернуться ответ со статусом 400\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Запрос с некорректными данными для поля `group`\",\n    \"group\": 99999\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{post_with_group}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_comment_with_empty_text // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе пользователя на создание комментария в поле `text` содержится пустая строка - должен вернуться ответ со статусом 400\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{post_with_group}}",
										"comments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_comment_with_empty_text // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе автора на редактирование комментария в поле `text` содержится пустая строка - должен вернуться ответ со статусом 400\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id_for_permission_tests}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{post_with_group}}",
										"comments",
										"{{comment_id_for_permission_tests}}",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{userAccessToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "update_delete_comment_not_author",
					"item": [
						{
							"name": "update_comment_not_author_with_patch_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 403\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"У пользователя не должно быть возможности изменять чужие комментарии\"",
											"    ).to.be.eql(\"Forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Изменение чужого комментария\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id_for_permission_tests}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{post_with_group}}",
										"comments",
										"{{comment_id_for_permission_tests}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_comment_not_auth_with_put_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 403\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"У пользователя не должно быть возможности изменять чужие комментарии\"",
											"    ).to.be.eql(\"Forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Изменение чужого комментария через PUT-запрос\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id_for_permission_tests}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{post_with_group}}",
										"comments",
										"{{comment_id_for_permission_tests}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_comment_not_author // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 403\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"У пользователя не должно быть возможности удалять чужие комментарии\"",
											"    ).to.be.eql(\"Forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id_for_permission_tests}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{post_with_group}}",
										"comments",
										"{{comment_id_for_permission_tests}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "unauthorized_user_tests",
					"item": [
						{
							"name": "posts_crud_no_auth",
							"item": [
								{
									"name": "create_post_without_group // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Незарегистрированный пользователь не должен иметь возможности создать пост\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Пост незарегистрированного пользователя\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/posts/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_post_with_patch_request // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Незарегистрированный пользователь не должен иметь возможности редактировать посты\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Незарегистрированный пользователь редактирует пост\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"posts",
												"{{post_with_group}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_post_with_put_request // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Незарегистрированный пользователь не должен иметь возможности редактировать посты\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Незарегистрированный пользователь редактирует пост\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"posts",
												"{{post_with_group}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_post // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Незарегистрированный пользователь не должен иметь возможности удалять посты\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"posts",
												"{{post_with_group}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "comments_crud_no_auth",
							"item": [
								{
									"name": "create_comment // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Незарегистрированный пользователь не должен иметь возможности создать комментарии\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Комментарий незарегистрированного пользователя\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"posts",
												"{{post_with_group}}",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "updete_comment_with_patch_request // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Незарегистрированный пользователь не должен иметь возможности редактировать комментарии\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Комментарий отредактирован незарегистрированным пользователем\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id_for_permission_tests}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"posts",
												"{{post_with_group}}",
												"comments",
												"{{comment_id_for_permission_tests}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_comment_with_put_request // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Незарегистрированный пользователь не должен иметь возможности редактировать комментарии\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Текст изменен через PUT-запрос\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id_for_permission_tests}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"posts",
												"{{post_with_group}}",
												"comments",
												"{{comment_id_for_permission_tests}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_comment // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Незарегистрированный пользователь не должен иметь возможности удалять комментарии\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/comments/{{comment_id_for_permission_tests}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"posts",
												"{{post_with_group}}",
												"comments",
												"{{comment_id_for_permission_tests}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "follow_tests",
							"item": [
								{
									"name": "get_follow // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя должен вернуть ответ с кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/follow/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"follow",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_subscription // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя должен вернуть ответ с кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"following\": \"{{adminUsername}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/follow/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"follow",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "404_tests",
					"item": [
						{
							"name": "get_group_404 // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 404\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе к `/api/v1/groups/{group_id}/` указан id несуществующей группы, код ответа должен быть 404\"",
											"    ).to.be.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/groups/99999/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"groups",
										"99999",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_post_404 // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 404\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе к `/api/v1/posts/{post_id}/` указан id несуществующего поста, код ответа должен быть 404\"",
											"    ).to.be.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/99999/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"99999",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_post_404 // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 404\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе к `/api/v1/posts/{post_id}/` указан id несуществующего поста, код ответа должен быть 404\"",
											"    ).to.be.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Новый текст для несуществующего поста\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/99999/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"99999",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_post_404 // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 404\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе к `/api/v1/posts/{post_id}/` указан id несуществующего поста, код ответа должен быть 404\"",
											"    ).to.be.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/99999/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"99999",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_comment_404 // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 404\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе к `/api/v1/posts/{post_id}/comments/{commint_id}/` указаны id несуществующих объектов, код ответа должен быть 404\"",
											"    ).to.be.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/99999/comments/99999/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"99999",
										"comments",
										"99999",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_comment_404 // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 404\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе к `/api/v1/posts/{post_id}/comments/{commint_id}/` указаны id несуществующих объектов, код ответа должен быть 404\"",
											"    ).to.be.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Новый текст для несуществующего комментария\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/99999/comments/99999/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"99999",
										"comments",
										"99999",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_comment_404 // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 404\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе к `/api/v1/posts/{post_id}/comments/{commint_id}/` указаны id несуществующих объектов, код ответа должен быть 404\"",
											"    ).to.be.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/99999/comments/99999/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"99999",
										"comments",
										"99999",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_existing_comment_with_wrong_url // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 404\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если в запросе к `/api/v1/posts/{post_id}/comments/{commint_id}/` указан id несуществующего поста, код ответа должен быть 404\"",
											"    ).to.be.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/99999/comments/{{comment_id_for_permission_tests}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"99999",
										"comments",
										"{{comment_id_for_permission_tests}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create_from_another_author",
					"item": [
						{
							"name": "create_post_from_another_author // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"required\": [\"id\", \"author\", \"text\", \"pub_date\", \"image\", \"group\"],",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"        \"image\": {\"type\": [\"string\", \"null\"]},",
											"        \"group\": {\"type\": [\"number\", \"null\"]}",
											"    },",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос зарегистрированного пользователя, содержащий данные для полей `text` и `author`, должен возвращать ответ со статусом 201\"",
											"    ).to.be.eql(\"Created\");",
											"});",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Ответ должен содержать ожидаемые данные\", function () {",
											"    pm.expect(responseData.author).to.eql(",
											"        pm.collectionVariables.get(\"adminUsername\"),",
											"        \"Убедитесь, что поле `author` содержит `username` пользователя, отправившего запрос\"",
											"    );",
											"    pm.collectionVariables.set(\"negative_test_post\", responseData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"author\": \"{{userUsername}}\",\n    \"text\": \"Создаем пост от лица другого пользователя\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_comment_from_another_user // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"required\": [\"id\", \"author\", \"text\", \"created\", \"post\"],",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"created\": {\"type\": \"string\"},",
											"        \"post\": {\"type\": \"number\"}",
											"    },",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос зарегистрированного пользователя, содержащий данные для полей `text` и `author`, должен возвращать ответ со статусом 201\"",
											"    ).to.be.eql(\"Created\");",
											"});",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Ответ должен содержать ожидаемые данные\", function () {",
											"    pm.expect(responseData.author).to.eql(",
											"        pm.collectionVariables.get(\"adminUsername\"),",
											"        \"Убедитесь, что поле `author` содержит `username` пользователя, отправившего запрос\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"author\": \"{{userUsername}}\",\n    \"text\": \"Тестовый комментарий\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/posts/{{negative_test_post}}/comments/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"posts",
										"{{negative_test_post}}",
										"comments",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete_and_update_follow_not_available",
					"item": [
						{
							"name": "update_follow_with_put_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"API не должен предоставлять возможность изменения подписки\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"following\": \"{{adminUsername}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/follow/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"follow",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_follow_with_patch_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"API не должен предоставлять возможность изменения подписки\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"following\": \"{{adminUsername}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/follow/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"follow",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_follow_details // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 404\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Эндпоинт `/api/v1/follow/{id}/` не должен быть реализован\"",
											"    ).to.be.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/follow/1/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"follow",
										"1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_follow // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"API не должен предоставлять возможность удаления подписки\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"following\": \"{{adminUsername}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/follow/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"follow",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{userAccessToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "create_subscription_for_other_user // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"        \"user\": {\"type\": \"string\"},",
									"        \"following\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"user\", \"following\"],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 201\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос зарегистрированного пользователя с корректными данными должен возвращаться ответ со статусом 201\"",
									"    ).to.be.eql(\"Created\");",
									"});",
									"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"pm.test('Значения полей в ответе должны соответствовать спецификации', function () {",
									"    pm.expect(",
									"        responseData.user,",
									"        \"Убедитесь, что нельзя создать подписку для другого пользователя, передав его `username` в качестве значения поля `user`\"",
									"    ).to.be.not.eql(pm.collectionVariables.get(\"secondUserUsername\"));",
									"    pm.expect(",
									"        responseData.following,",
									"        \"Убедитесь, что в ответе на запрос значением поля `following` является `username` автора, на которого оформлена подписка\"",
									"    ).to.be.eql(pm.collectionVariables.get(\"secondUserUsername\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"{{adminUsername}}\",\n    \"following\": \"{{secondUserUsername}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/follow/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"follow",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "tear_down",
			"item": [
				{
					"name": "delete_post_with_group // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус-код ответа должен быть 204\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос автора поста должен возвращаться ответ со статусом 204\"",
									"    ).to.be.eql(\"No Content\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{post_with_group}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{post_with_group}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_negative_test_post // User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус-код ответа должен быть 204\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"На запрос автора поста должен возвращаться ответ со статусом 204\"",
									"    ).to.be.eql(\"No Content\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/posts/{{negative_test_post}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{negative_test_post}}",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "secondUserUsername",
			"value": "second_user",
			"type": "string"
		},
		{
			"key": "userAccessToken",
			"value": ""
		},
		{
			"key": "userRefreshToken",
			"value": ""
		},
		{
			"key": "userUsername",
			"value": ""
		},
		{
			"key": "adminAccessToken",
			"value": ""
		},
		{
			"key": "adminRefreshToken",
			"value": ""
		},
		{
			"key": "adminUsername",
			"value": ""
		},
		{
			"key": "group_id",
			"value": ""
		},
		{
			"key": "post_without_group",
			"value": ""
		},
		{
			"key": "post_with_group",
			"value": ""
		},
		{
			"key": "comment_id",
			"value": ""
		},
		{
			"key": "comment_id_for_permission_tests",
			"value": ""
		},
		{
			"key": "negative_test_post",
			"value": ""
		}
	]
}